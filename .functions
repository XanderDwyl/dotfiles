#!/usr/bin/env bash

# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$_" || return;
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')" || return;
}

# Get macOS Software and App Store Updates, update installed Ruby gems, Homebrew, npm, and their installed packages
function update() {
	sudo -v
	echo "Updating everything!";
	echo "";
	sudo softwareupdate -i -a;
	echo "";
	echo "Mac App Store:"
	mas upgrade;
	echo "";
	echo "Brew:"
	brew update;
	brew upgrade;
	brew cleanup;
	brew cask upgrade;
	echo "";
	echo "npm:"
	npm install npm -g;
	npm update -g;
	# echo "";
	# echo "Gem:"
	# sudo gem update --system;
	# sudo gem update;
	# sudo gem cleanup;
	# echo "";
	echo "Finished updating!";
}

# Install font using brew cask
function font() {
	local fontName="font-${*}";
	brew cask install "${fontName}";
}

function addBrew() {
	if brew ls --versions $1 > /dev/null; then
		echo "$1 is already installed"
	else
		brew install $1
		echo "$1" >> ~/.dotfiles/.brew/brews.txt
		sort -o ~/.dotfiles/.brew/brews.txt ~/.dotfiles/.brew/brews.txt
	fi
}

function updateBrews() {
	sort -o ~/.dotfiles/.brew/brews.txt ~/.dotfiles/.brew/brews.txt
}

function console() {
	osascript -e 'tell application "BetterTouchTool" to trigger_named_async_without_response "run trigger"'
}

# Make all binaries in folder executable (or given input file)
function exe() {
  if [ $# -eq 0 ]; then
    for binary in *; do
		chmod a+x "$binary"
	done
	else
		chmod a+x "$@";
	fi;

}

function scpt {
  for f in *.applescript
  do
      osacompile -o "`basename -s .applescript "$f"`.scpt" "$f"
      rm "$f"
  done
}

function shells {
  echo "Default Shell:"
  echo "$SHELL"
  echo "Current Shell:"
  echo "$0"
  echo "Available Shells:"
  echo "
  /bin/bash
  /bin/csh
  /bin/fish
  /bin/ksh
  /bin/sh
  /bin/tcsh
  /bin/zsh
  "
}

function mark {
  wd="`pwd`";
  export lastMark=$wd;
  if [ $# -gt 0 ]; then
  export $1=$lastMark;
  fi
}

function die() {
	osascript -e 'tell application "System Events" to shut down'
}

function restart() {
	osascript -e 'tell application "System Events" to restart'
}

# Git clone and cd into new directory
function gcd() {
	git clone "$1" && cd "$(basename "$1" .git)" || return
}

# Git clone from clipboard
function gcb(){
    git clone "$(pbpaste)"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${*%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$*" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType;
	mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

function localip(){
	function _localip(){ echo "ðŸ“¶  ""$(ipconfig getifaddr "$1")"; }
	export -f _localip
	local purple="\x1B\[35m" reset="\x1B\[m"
	networksetup -listallhardwareports | \
		sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
		sed -r "s/Device: (en.*)$/_localip \1/e" | \
		sed -r "s/Ethernet Address:/ðŸ“˜ /g" | \
		sed -r "s/(VLAN Configurations)|==*//g"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip
	ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize
	origsize=$(wc -c < "$1");
	local gzipsize
	gzipsize=$(gzip -c "$1" | wc -c);
	local ratio
	ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}â€¦";
	echo ""; # newline

	local tmp
	tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText
		certText=$(echo "${tmp}" \
				| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! "$(uname -s)" = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# open Xcode
function openx(){
  if test -n "$(find . -maxdepth 1 -name '*.xcworkspace' -print -quit)"
  then
    echo "Opening workspace"
    open *.xcworkspace
    return
  else
    if test -n "$(find . -maxdepth 1 -name '*.xcodeproj' -print -quit)"
    then
      echo "Opening project"
      open *.xcodeproj
      return
    else
      # in root of a react-native project
      cd ios || return
      if test -n "$(find . -maxdepth 1 -name '*.xcworkspace' -print -quit)"
      then
        echo "Opening workspace in /ios"
        open *.xcworkspace
        cd ..
        return
      else
        if test -n "$(find . -maxdepth 1 -name '*.xcodeproj' -print -quit)"
        then
          echo "Opening project in /ios"
          open *.xcodeproj
          cd ..
          return
        else
          echo "Nothing found"
        fi
      fi
    fi
  fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

colors() {
	local X
	X=$(tput op)
	local Y
	Y=$(printf %$((COLUMNS-6))s)
	for i in {0..256}; do
		o=00$i;
		echo -e ${o:${#o}-3:3} "$(tput setaf $i;tput setab $i)"${Y// /=}$X;
	done
}

# Calculator
calc() {
	echo "$*" | bc -l;
}

# Weather
meteo() {
	local LOCALE
	LOCALE=$(echo ${LANG:-en} | cut -c1-2)
	local LOCATION
	if [ $# -eq 0 ]; then
		LOCATION=$(curl -s ipinfo.io/loc)
	else
		LOCATION=$1
	fi
	curl -s "$LOCALE.wttr.in/$LOCATION"
}

camerausedby() {
	echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
	usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
	echo -e "Recent camera uses:\n$usedby"
}

# reset Xcode simulators
simreset(){
  sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService; xcrun simctl list devices | grep "iPhone\|iPad" | awk '{print $(NF -1)}' | cut -d "(" -f2 | cut -d ")" -f1 | grep -E "^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$" | xargs -I {} xcrun simctl erase "{}"
}
